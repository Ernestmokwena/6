import streamlit as st
import sqlite3
from pyzbar.pyzbar import decode
from PIL import Image
import cv2
import numpy as np
import tempfile

# SQLite setup
conn = sqlite3.connect('scanprods.db')
c = conn.cursor()

# Function to scan QR code from image
def scan_qr_code_from_image(img):
    img_gray = img.convert('L')
    decoded_objects = decode(img_gray)
    if decoded_objects:
        qr_data = decoded_objects[0].data.decode('utf-8')
        return qr_data
    else:
        return None

# Function to fetch product details from database using product ID
def fetch_product_details(product_id):
    c.execute('SELECT product_name, barcode, expiry_date, status FROM products WHERE id = ?', (product_id,))
    product = c.fetchone()
    if product:
        return product
    else:
        return None

def main():
    st.title('Shoot & Scan QR Code')
    tab1, tab2 = st.tabs(["Upload Image", "Scan with Camera"])

    with tab1:
        uploaded_file = st.file_uploader("Upload an image...", type=["jpg", "jpeg", "png"])
        
        if uploaded_file is not None:
            img = Image.open(uploaded_file)
            qr_data = scan_qr_code_from_image(img)
            if qr_data:
                if qr_data.startswith('PRODAPP:'):
                    try:
                        product_id = int(qr_data.split('\n')[0].split(': ')[1])
                        product_details = fetch_product_details(product_id)
                        if product_details:
                            product_name, barcode, expiry_date, status = product_details
                            st.success(f"Decoded QR Code Data:")
                            st.write(f"Product Name: {product_name}")
                            st.write(f"Barcode: {barcode}")
                            st.write(f"Expiry Date: {expiry_date}")
                            st.write(f"Status: {status}")

                            if status == 'AUTHORIZED':
                                st.success('Product is Authorized')
                                if st.button('the world can do with a smart shopper like you!'):
                                    st.write('Keep being a good citizen')
                            else:
                                st.warning('Product is Counterfeit')
                                if st.button('Report'):
                                    st.write('Report submitted!')
                        else:
                            st.warning("Product details not found.")
                    except Exception as e:
                        st.warning("Error decoding QR code data.")
                        st.warning(f"Details: {e}")
                else:
                    st.warning("This QR code was not generated by PRODTRACK app.")
            else:
                st.warning("No QR code found in the uploaded image.")

    with tab2:
        st.subheader('Or Scan with Camera')

        # Add custom JavaScript to access the camera and capture frames
        st.markdown(
            """
            <script>
            async function setupCamera() {
                const video = document.createElement('video');
                video.setAttribute('autoplay', '');
                video.setAttribute('muted', '');
                video.setAttribute('playsinline', '');
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
                document.body.appendChild(video);
                return new Promise((resolve) => {
                    video.onloadedmetadata = () => {
                        resolve(video);
                    };
                });
            }

            function captureFrame(video) {
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                const context = canvas.getContext('2d');
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                return canvas.toDataURL('image/png');
            }

            async function startScan() {
                const video = await setupCamera();
                const scanButton = document.getElementById('scanButton');
                scanButton.onclick = () => {
                    const frame = captureFrame(video);
                    video.pause();
                    video.srcObject.getTracks().forEach(track => track.stop());
                    fetch('upload_frame', {
                        method: 'POST',
                        body: JSON.stringify({ image: frame }),
                        headers: { 'Content-Type': 'application/json' },
                    }).then(response => response.json()).then(data => {
                        alert('QR Code Data: ' + data.qr_data);
                    });
                };
            }

            document.addEventListener('DOMContentLoaded', () => {
                document.getElementById('startScanButton').onclick = startScan;
            });
            </script>
            <button id="startScanButton">Start Camera Scan</button>
            <button id="scanButton">Scan QR Code</button>
            """,
            unsafe_allow_html=True
        )

        # Endpoint to handle frame uploads
        from flask import Flask, request, jsonify
        app = Flask(__name__)

        @app.route('/upload_frame', methods=['POST'])
        def upload_frame():
            data = request.json['image']
            img_data = data.split(",")[1]
            img = Image.open(tempfile.NamedTemporaryFile(delete=False, suffix=".png"))
            img.save(tempfile.NamedTemporaryFile(delete=False, suffix=".png"), "PNG")
            qr_data = scan_qr_code_from_image(img)
            return jsonify(qr_data=qr_data)

        st.markdown(
            """
            <style>
            button {
                margin: 5px;
            }
            </style>
            """
        )

if __name__ == '__main__':
    main()
